#!/bin/bash
set -e;
#set -vx;

PLUGIN_NAME="postgresql"
DOCKER_IMAGE="orchardup/postgresql"

# APP=<db name taken as argument>
# CONTAINER_NAME=pg_$APP
#
# To create/start postgresql container/instance:
#     docker run --name $APP -d $DB_IMAGE
# For some reason, we clone the base docker image when creating the database,
# so $DB_IMAGE=$APP/postgresql
#
# To connect to the instance from an application:
#     docker run --name some-app --link some-postgres:postgres -d application-that-uses-postgres
#
# To open a postgresql console (psql):
#     docker run -it --link pgsophie:postgres --rm postgres sh -c 'exec psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U postgres'
#

DB_PORT='5432'
DB_NAME='db'
DB_USER='root'
ENVVAR_NAME="DATABASE_URL"

PLUGIN_NAME="postgres"

# Check if name is specified
if [[ $1 == pg:* ]]; then
    if [ -z $2 ] && [ $1 != pg:list ]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        echo "Link plugin not found... Did you install it from https://github.com/rlaneve/dokku-link?"
        exit 1
    fi

fi

# Create dokku .postgresql directory if not exists
if [[ ! -d $DOKKU_ROOT/.postgresql ]]; then
    mkdir -p $DOKKU_ROOT/.postgresql
    chown -R dokku: $DOKKU_ROOT/.postgresql
fi

# The container name that will be generated
CONTAINER_NAME="pg_$APP"

# This is where persistent data will be stored, directly on the host (and not in a container, or so it seems, which is not super clean imo)
HOST_DIR="$DOKKU_ROOT/.postgresql/$APP"

case "$1" in

  pg:create)
    # Check if Postgres container is installed
    IMAGE=$(docker images | grep "$DOCKER_IMAGE" | awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "Postgres image $DOCKER_IMAGE not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi

    # Stop existing container with the same persistent Postgres
    ID=$(docker ps | grep "$CONTAINER_NAME" | awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi

    # Check if an existing DB volume exists
    if [[ -d $HOST_DIR ]]; then
        echo "-----> Reusing $CONTAINER_NAME data"
    else
        mkdir -p $HOST_DIR
        chown -R dokku:dokku $HOST_DIR
    fi
    #VOLUME="$HOST_DIR/data:/var/lib/postgresql"
    PASS=$(openssl rand -base64 32|base64)

    # Launch container
        #-v $VOLUME \
        #-e PG_PASS=$PASS \
    docker run -d \
        --name=$CONTAINER_NAME \
        -e POSTGRESQL_USER=${APP//[^a-zA-z0-9_]/''} \
        -e POSTGRESQL_DB=${APP//[^a-zA-z0-9_]/''} \
        $DOCKER_IMAGE

    # Link to a potential existing app
    dokku g:link $APP $APP
    echo "-----> Postgres container created: $CONTAINER_NAME"
    sleep 1
    dokku pg:info $APP
    ;;

  pg:delete)
    # Stop the container
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID > /dev/null
        docker rm $ID  > /dev/null
    fi

    # Remove persistent volume
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi

    # unlink this container as "postgres"
    dokku link:delete "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"
    dokku config:unset "$APP" $ENVVAR_NAME
    echo "-----> Postgres container deleted: $CONTAINER_NAME"
    ;;

  pg:info)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
    echo
    echo "       Host: ${IP}"
    echo "       Private port: 5432"
    echo
    ;;

  pg:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        CONTAINER_NAME="pg_$3"

        # link this container as "postgres"
        dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"

        # figure out IP to set env var
        ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
        IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
        dokku config:set "$APP" $ENVVAR_NAME="postgres://${IP}:5432"
        echo "-----> $APP linked to $CONTAINER_NAME container"
    fi
    ;;

  pg:list)
    CONTAINERS=$(ls $DOKKU_ROOT/.postgresql/ 2> /dev/null)
    if [[ -z $CONTAINERS ]]; then
        echo "There are no PostgreSQL containers created."
    else
        echo "PostgreSQL containers:"
        for CONTAINER in $CONTAINERS; do
            echo "  - $CONTAINER"
        done
    fi
    ;;

  pg:logs)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    pg:create <db>                                  Create a PostgreSQL container
    pg:delete <db>                                  Delete specified PostgreSQL container
    pg:info <db>                                    Display database informations
    pg:link <app> <db>                              Link an app to a PostgreSQL database
    pg:logs <db>                                    Display last logs from PostgreSQL container
    pg:list                                         Display list of PostgreSQL containers
EOF
    ;;

esac